/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Activated = ContractEventLog<{
  time: string;
  0: string;
}>;
export type Finished = ContractEventLog<{
  time: string;
  0: string;
}>;
export type Purchase = ContractEventLog<{
  purchaser: string;
  id: string;
  amount: string;
  etherPaid: string;
  purchasedAt: string;
  redeemAt: string;
  hodltype: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type Claim = ContractEventLog<{
  purchaser: string;
  id: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface Hodl extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Hodl;
  clone(): Hodl;
  methods: {
    sold(): NonPayableTransactionObject<string>;

    active(): NonPayableTransactionObject<boolean>;

    sizeMultipliers(
      addy: string,
      toBeInvested: number | string | BN
    ): NonPayableTransactionObject<{
      m: string;
      d: string;
      0: string;
      1: string;
    }>;

    etherCollected(): NonPayableTransactionObject<string>;

    instantBuy(ref: string): PayableTransactionObject<void>;

    totalRefferred(addy: string): NonPayableTransactionObject<string>;

    longBuy(ref: string): PayableTransactionObject<void>;

    latestOrderId(): NonPayableTransactionObject<string>;

    totalInvested(addy: string): NonPayableTransactionObject<string>;

    tokenAddress(): NonPayableTransactionObject<string>;

    isClaimed(
      orderId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    endPresale(): NonPayableTransactionObject<void>;

    mediumBuy(ref: string): PayableTransactionObject<void>;

    lockupOf(
      orderId: number | string | BN
    ): NonPayableTransactionObject<string>;

    tokenFallback(
      arg0: string,
      _value: number | string | BN,
      arg2: string | number[]
    ): NonPayableTransactionObject<void>;

    tokensRemaining(): NonPayableTransactionObject<string>;

    tokensIfInvest(
      investor: string,
      investment: number | string | BN
    ): NonPayableTransactionObject<{
      instant: string;
      short: string;
      medium: string;
      long: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    setInitialInvestedAmount(
      investors: string[],
      etherInvested: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    shortBuy(ref: string): PayableTransactionObject<void>;

    buyerOf(orderId: number | string | BN): NonPayableTransactionObject<string>;

    redeem(orderId: number | string | BN): NonPayableTransactionObject<void>;

    amountOf(
      orderId: number | string | BN
    ): NonPayableTransactionObject<string>;

    setVips(investors: string[]): NonPayableTransactionObject<void>;

    isVIP(addy: string): NonPayableTransactionObject<boolean>;

    hardCap(): NonPayableTransactionObject<string>;
  };
  events: {
    Activated(cb?: Callback<Activated>): EventEmitter;
    Activated(options?: EventOptions, cb?: Callback<Activated>): EventEmitter;

    Finished(cb?: Callback<Finished>): EventEmitter;
    Finished(options?: EventOptions, cb?: Callback<Finished>): EventEmitter;

    Purchase(cb?: Callback<Purchase>): EventEmitter;
    Purchase(options?: EventOptions, cb?: Callback<Purchase>): EventEmitter;

    Claim(cb?: Callback<Claim>): EventEmitter;
    Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Activated", cb: Callback<Activated>): void;
  once(
    event: "Activated",
    options: EventOptions,
    cb: Callback<Activated>
  ): void;

  once(event: "Finished", cb: Callback<Finished>): void;
  once(event: "Finished", options: EventOptions, cb: Callback<Finished>): void;

  once(event: "Purchase", cb: Callback<Purchase>): void;
  once(event: "Purchase", options: EventOptions, cb: Callback<Purchase>): void;

  once(event: "Claim", cb: Callback<Claim>): void;
  once(event: "Claim", options: EventOptions, cb: Callback<Claim>): void;
}
